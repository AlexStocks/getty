/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: codec.proto

package rpc

import (
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CallType int32

const (
	CT_UNKNOWN       CallType = 0
	CT_OneWay        CallType = 1
	CT_TwoWay        CallType = 2
	CT_TwoWayNoReply CallType = 3
)

var CallType_name = map[int32]string{
	0: "CT_UNKNOWN",
	1: "CT_OneWay",
	2: "CT_TwoWay",
	3: "CT_TwoWayNoReply",
}

var CallType_value = map[string]int32{
	"CT_UNKNOWN":       0,
	"CT_OneWay":        1,
	"CT_TwoWay":        2,
	"CT_TwoWayNoReply": 3,
}

func (x CallType) Enum() *CallType {
	p := new(CallType)
	*p = x
	return p
}

func (x CallType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(CallType_name, int32(x))
}

func (x *CallType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CallType_value, data, "CallType")
	if err != nil {
		return err
	}
	*x = CallType(value)
	return nil
}

func (CallType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9610d574777ab505, []int{0}
}

type GettyRPCRequestHeader struct {
	Service  string   `protobuf:"bytes,1,opt,name=Service" json:"Service"`
	Method   string   `protobuf:"bytes,2,opt,name=Method" json:"Method"`
	CallType CallType `protobuf:"varint,3,opt,name=CallType,enum=rpc.CallType" json:"CallType"`
}

func (m *GettyRPCRequestHeader) Reset()      { *m = GettyRPCRequestHeader{} }
func (*GettyRPCRequestHeader) ProtoMessage() {}
func (*GettyRPCRequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_9610d574777ab505, []int{0}
}

func (m *GettyRPCRequestHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *GettyRPCRequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GettyRPCRequestHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *GettyRPCRequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GettyRPCRequestHeader.Merge(m, src)
}

func (m *GettyRPCRequestHeader) XXX_Size() int {
	return m.Size()
}

func (m *GettyRPCRequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_GettyRPCRequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_GettyRPCRequestHeader proto.InternalMessageInfo

type GettyRPCResponseHeader struct {
	Error string `protobuf:"bytes,1,opt,name=Error" json:"Error"`
}

func (m *GettyRPCResponseHeader) Reset()      { *m = GettyRPCResponseHeader{} }
func (*GettyRPCResponseHeader) ProtoMessage() {}
func (*GettyRPCResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_9610d574777ab505, []int{1}
}

func (m *GettyRPCResponseHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *GettyRPCResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GettyRPCResponseHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *GettyRPCResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GettyRPCResponseHeader.Merge(m, src)
}

func (m *GettyRPCResponseHeader) XXX_Size() int {
	return m.Size()
}

func (m *GettyRPCResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_GettyRPCResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_GettyRPCResponseHeader proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("rpc.CallType", CallType_name, CallType_value)
	proto.RegisterType((*GettyRPCRequestHeader)(nil), "rpc.GettyRPCRequestHeader")
	proto.RegisterType((*GettyRPCResponseHeader)(nil), "rpc.GettyRPCResponseHeader")
}

func init() { proto.RegisterFile("codec.proto", fileDescriptor_9610d574777ab505) }

var fileDescriptor_9610d574777ab505 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8e, 0x41, 0x4b, 0x3a, 0x41,
	0x18, 0xc6, 0xe7, 0xd5, 0xff, 0xbf, 0x72, 0x42, 0x59, 0x86, 0x0a, 0x91, 0x78, 0x13, 0x4f, 0x12,
	0xb4, 0x42, 0x74, 0xec, 0xe4, 0x12, 0x05, 0xd1, 0x1a, 0xdb, 0x86, 0x47, 0xd1, 0xf5, 0x4d, 0x05,
	0x73, 0xb6, 0x71, 0x2d, 0xf6, 0xd6, 0xa9, 0x73, 0x1f, 0xa3, 0x8f, 0xe2, 0xd1, 0xa3, 0xa7, 0x70,
	0xc7, 0x4b, 0x47, 0x3f, 0x42, 0xb4, 0xae, 0x5a, 0xb7, 0xf9, 0xfd, 0x9e, 0x67, 0x78, 0x1f, 0xbe,
	0xeb, 0xc9, 0x36, 0x79, 0xa6, 0xaf, 0x64, 0x20, 0x45, 0x5a, 0xf9, 0x5e, 0xe1, 0xa4, 0xd3, 0x0b,
	0xba, 0xa3, 0x96, 0xe9, 0xc9, 0xc7, 0x4a, 0x47, 0x76, 0x64, 0x25, 0xce, 0x5a, 0xa3, 0x87, 0x98,
	0x62, 0x88, 0x5f, 0xcb, 0x3f, 0xa5, 0x37, 0xe0, 0xfb, 0x97, 0x14, 0x04, 0xa1, 0x73, 0x6b, 0x39,
	0xf4, 0x34, 0xa2, 0x61, 0x70, 0x45, 0xcd, 0x36, 0x29, 0x81, 0x7c, 0xfb, 0x8e, 0xd4, 0x73, 0xcf,
	0xa3, 0x3c, 0x14, 0xa1, 0x9c, 0xa9, 0xfe, 0x1b, 0x7f, 0x1e, 0x31, 0x67, 0x25, 0xc5, 0x21, 0xdf,
	0xba, 0xa1, 0xa0, 0x2b, 0xdb, 0xf9, 0xd4, 0xaf, 0x38, 0x71, 0xa2, 0xc2, 0x77, 0xac, 0x66, 0xbf,
	0xef, 0x86, 0x3e, 0xe5, 0xd3, 0x45, 0x28, 0xe7, 0x4e, 0xb3, 0xa6, 0xf2, 0x3d, 0x73, 0x25, 0x93,
	0xfa, 0xba, 0x54, 0x3a, 0xe3, 0x07, 0x9b, 0x1d, 0x43, 0x5f, 0x0e, 0x86, 0x94, 0x0c, 0x29, 0xf0,
	0xff, 0x17, 0x4a, 0x49, 0xf5, 0x67, 0xc6, 0x52, 0x1d, 0xdb, 0x9b, 0x33, 0x22, 0xc7, 0xb9, 0xe5,
	0x36, 0xee, 0xed, 0x6b, 0xbb, 0x56, 0xb7, 0x0d, 0x26, 0xb2, 0x3c, 0x63, 0xb9, 0x8d, 0xda, 0x80,
	0xea, 0xcd, 0xd0, 0x80, 0x04, 0xdd, 0x17, 0xf9, 0x83, 0x29, 0xb1, 0xc7, 0x8d, 0x35, 0xda, 0xd2,
	0x21, 0xbf, 0x1f, 0x1a, 0xe9, 0xea, 0xf9, 0x38, 0x42, 0x36, 0x89, 0x90, 0x4d, 0x23, 0x64, 0xb3,
	0x08, 0x61, 0x11, 0x21, 0xbc, 0x6a, 0x84, 0x0f, 0x8d, 0x30, 0xd6, 0x08, 0x13, 0x8d, 0x30, 0xd3,
	0x08, 0x5f, 0x1a, 0xd9, 0x42, 0x23, 0xbc, 0xcf, 0x91, 0x4d, 0xe6, 0xc8, 0xa6, 0x73, 0x64, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xa0, 0xc1, 0x41, 0x8e, 0x01, 0x00, 0x00,
}

func (x CallType) String() string {
	s, ok := CallType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

func (this *GettyRPCRequestHeader) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GettyRPCRequestHeader)
	if !ok {
		that2, ok := that.(GettyRPCRequestHeader)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GettyRPCRequestHeader")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GettyRPCRequestHeader but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GettyRPCRequestHeader but is not nil && this == nil")
	}
	if this.Service != that1.Service {
		return fmt.Errorf("Service this(%v) Not Equal that(%v)", this.Service, that1.Service)
	}
	if this.Method != that1.Method {
		return fmt.Errorf("Method this(%v) Not Equal that(%v)", this.Method, that1.Method)
	}
	if this.CallType != that1.CallType {
		return fmt.Errorf("CallType this(%v) Not Equal that(%v)", this.CallType, that1.CallType)
	}
	return nil
}

func (this *GettyRPCRequestHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GettyRPCRequestHeader)
	if !ok {
		that2, ok := that.(GettyRPCRequestHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Service != that1.Service {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	return true
}

func (this *GettyRPCResponseHeader) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GettyRPCResponseHeader)
	if !ok {
		that2, ok := that.(GettyRPCResponseHeader)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GettyRPCResponseHeader")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GettyRPCResponseHeader but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GettyRPCResponseHeader but is not nil && this == nil")
	}
	if this.Error != that1.Error {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	return nil
}

func (this *GettyRPCResponseHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GettyRPCResponseHeader)
	if !ok {
		that2, ok := that.(GettyRPCResponseHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}

func (this *GettyRPCRequestHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rpc.GettyRPCRequestHeader{")
	s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "CallType: "+fmt.Sprintf("%#v", this.CallType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}

func (this *GettyRPCResponseHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rpc.GettyRPCResponseHeader{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}

func valueToGoStringCodec(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

func (m *GettyRPCRequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GettyRPCRequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCodec(dAtA, i, uint64(len(m.Service)))
	i += copy(dAtA[i:], m.Service)
	dAtA[i] = 0x12
	i++
	i = encodeVarintCodec(dAtA, i, uint64(len(m.Method)))
	i += copy(dAtA[i:], m.Method)
	dAtA[i] = 0x18
	i++
	i = encodeVarintCodec(dAtA, i, uint64(m.CallType))
	return i, nil
}

func (m *GettyRPCResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GettyRPCResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCodec(dAtA, i, uint64(len(m.Error)))
	i += copy(dAtA[i:], m.Error)
	return i, nil
}

func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}

func (m *GettyRPCRequestHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	n += 1 + l + sovCodec(uint64(l))
	l = len(m.Method)
	n += 1 + l + sovCodec(uint64(l))
	n += 1 + sovCodec(uint64(m.CallType))
	return n
}

func (m *GettyRPCResponseHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	n += 1 + l + sovCodec(uint64(l))
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}

func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (this *GettyRPCRequestHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{
		`&GettyRPCRequestHeader{`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`CallType:` + fmt.Sprintf("%v", this.CallType) + `,`,
		`}`,
	}, "")
	return s
}

func (this *GettyRPCResponseHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{
		`&GettyRPCResponseHeader{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}

func valueToStringCodec(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}

func (m *GettyRPCRequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GettyRPCRequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GettyRPCRequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= CallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *GettyRPCResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GettyRPCResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GettyRPCResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)
